@using BaseballUa.Data
@model BaseballUa.ViewModels.TournamentViewModel

@{
    ViewData["Title"] = "Edit Tournament";
}

<h1>Редагування типу змагань</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="EditTournament">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Sport" class="control-label"></label>
                @Html.DropDownListFor(x => Model.Sport, Enums.SportType.NotDefined.ToSelectList(), optionLabel: "--- оберіть ---", htmlAttributes: new { @class = "form-control"})
                <span asp-validation-for="Sport" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsAnual" /> @Html.DisplayNameFor(model => model.IsAnual)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsInternational" /> @Html.DisplayNameFor(model => model.IsInternational)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsOfficial" /> @Html.DisplayNameFor(model => model.IsOfficial)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsFun" /> @Html.DisplayNameFor(model => model.IsFun)
                </label>
            </div>
@*            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <input asp-for="CategoryId" class="form-control" />
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>*@
@*            <div class="form-group">
                <label asp-for="CategoryShortName" class="control-label"></label>
                <input asp-for="CategoryShortName" class="form-control" />
                <span asp-validation-for="CategoryShortName" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                @Html.LabelFor(x => Model.CategoryId, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.CategoryId, new SelectList(Model.SelectCategories, "Value", "Text"), optionLabel: "--- оберіть ---", htmlAttributes: new { @class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="ListTournaments">Повернутися до списку</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
